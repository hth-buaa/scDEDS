a = stats::coef(fit)["a"]
b = stats::coef(fit)["b"]
c = stats::coef(fit)["c"]
message("Fitting results: a = ", a, ", b = ", b, ", c = ", c, ".")
x
y
x = c(200, 800, 2000)
fit = minpack.lm::nlsLM(
y ~ c * base::log(a * x + b),
data = data,
start = base::list(a = a_init, b = b_init, c = c_init),
# start = base::list(a = 0.001, b = 1, c = 20),
control = minpack.lm::nls.lm.control(maxiter = 1000)
)
a = stats::coef(fit)["a"]
b = stats::coef(fit)["b"]
c = stats::coef(fit)["c"]
message("Fitting results: a = ", a, ", b = ", b, ", c = ", c, ".")
points = base::list()
for (i in 1:3) {points[[i]] = base::data.frame(x = x, y = y)}
data = base::do.call(rbind, points)
x1 = data$x[1]
x2 = data$x[2]
y1 = data$y[1]
y2 = data$y[2]
if (x1 == x2) stop("Error: The first two points cannot have identical x-values.")
a_init = 1
b_init = 1
c_init = stats::median(data$y)
message("Initializing parameters a = 1, b = 1, c = ", c_init, " for y=c·ln(ax+b).")
message("Ensuring parameter validity.")
if (base::any(a_init * data$x + b_init <= 0)) {
message("Adding minor offset to ensure logarithmic domain validity.")
b_init = b_init + 1e-6
if (base::any(a_init * data$x + b_init <= 0)) {
stop("Unable to find valid initial parameters. Please verify the input data.")
}
}
message("Fitting using the nls.lm algorithm.")
fit = minpack.lm::nlsLM(
y ~ c * base::log(a * x + b),
data = data,
start = base::list(a = a_init, b = b_init, c = c_init),
# start = base::list(a = 0.001, b = 1, c = 20),
control = minpack.lm::nls.lm.control(maxiter = 1000)
)
a = stats::coef(fit)["a"]
b = stats::coef(fit)["b"]
c = stats::coef(fit)["c"]
message("Fitting results: a = ", a, ", b = ", b, ", c = ", c, ".")
# Plotting function: y = ceiling(c·ln(ax+b))
message("Plotting function: y = ceiling(c·ln(ax+b)).")
x = base::seq(100, xmax, by = 1)
y = base::ceiling(c * base::log(a * x + b))
df = base::data.frame(x = x, y = y)
df
x_annotate = 200
step = 300
while((next_val = x_annotate[base::length(x_annotate)] + step) <= xmax) {
x_annotate = c(x_annotate, next_val)
step = step + 100
}
y_annotate = base::ceiling(c * base::log(a * x_annotate + b))
annotate_df = base::data.frame(
x = x_annotate, y = y_annotate,
label = base::sprintf("(%.0f, %.0f)", base::ceiling(x_annotate), base::ceiling(y_annotate))
)
p = ggplot2::ggplot(df, ggplot2::aes(x = x, y = y)) +
ggplot2::geom_line(color = "blue", linewidth = 1) +
ggplot2::geom_hline(yintercept = 0, color = "gray50") +
ggplot2::geom_vline(xintercept = 0, color = "gray50") +
ggplot2::geom_point(data = annotate_df, ggplot2::aes(x = x, y = y),
color = "red", fill = NA, shape = 21, size = 3, stroke = 1.5) +
ggrepel::geom_text_repel(data = annotate_df, ggplot2::aes(label = label),
nudge_x = 50, nudge_y = 0.2 * base::max(df$y),
size = 3.5, segment.color = "gray60",
box.padding = 0.5, max.overlaps = Inf) +
ggplot2::labs(
title = "y = base::ceiling(c*log(a*x+b))",
subtitle = base::paste0("a = ", base::format(base::round(a, 4), nsmall = 4),
", b = ", base::format(base::round(b, 4), nsmall = 4),
", c = ", base::format(base::round(c, 4), nsmall = 4)),
x = "Number of cells in the branch",
y = "Minimum number of cells per group in the branch") +
ggplot2::scale_x_continuous(labels = function(x) base::format(x, big.mark = ",")) +
ggplot2::scale_y_continuous(labels = function(y) base::format(base::round(y, 1), nsmall = 1)) +
ggplot2::theme_minimal(base_family = "sans") +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = ggplot2::element_text(hjust = 0.5, size = 10, color = "gray40"),
axis.text = ggplot2::element_text(size = 10),
panel.grid.minor = ggplot2::element_blank()
)
p
ggplot2::ggsave("y = base::ceiling(c·ln(ax+b)).png", width = 6, height = 5, plot = p)
ggplot2::ggsave("y = base::ceiling(c ln(ax+b)).png", width = 6, height = 5, plot = p)
ggplot2::ggsave("y = base::ceiling(c ln(ax b)).png", width = 6, height = 5, plot = p)
ggplot2::ggsave("y = ceiling(c ln(ax b)).png", width = 6, height = 5, plot = p)
ggplot2::ggsave("y = ceiling(c·ln(ax+b)).png", width = 6, height = 5, plot = p)
document()
build()
?cell_grouping
load("D:/pbmc-equation/pr50 newest for paper/CD4 TCM result pr50/2.1 Data Processing - Pseudotime Analysis And Cell Branching Assignment/code2.1.RData")
alpha_gene = 0.700000000 #【待调超参】，保留缺失值率小于此的基因
alpha_cell = 0.900000000 #【待调超参】，保留缺失值率小于此的细
interest_cell_type_genes_pseudotime_info = get_genes_pseudotime_info(
interest_cell_type_Branches, interest_cell_type_data,
alpha_gene = alpha_gene, #【待调超参】，保留缺失值率小于此的基因
alpha_cell = alpha_cell, #【待调超参】，保留缺失值率小于此的细胞
ncores = 1
)
points_x_for_fitting_nc_and_nmin = c(200, 500, 1000)
points_y_for_fitting_nc_and_nmin = c(5, 10, 15)
interest_cell_type_group = cell_grouping(interest_cell_type_genes_pseudotime_info,
points_x_for_fitting_nc_and_nmin, points_y_for_fitting_nc_and_nmin,
ncores = 1)
document()
build()
check()
?data.frame
?as.character
?nrow
?rbind
?gsub
?max
?getMatrixSet
?db
?JASPAR2024
JASPAR2024::JASPAR2024
?seq_along
?dim
get_promoter_sequence
?matchPWM
?is.null
?is.na
?paste
?max
？file
?
?file
?file
?writeLines
?close
?fread
?is.na
?group_by
?summarise
?mean
?ungroup
?pivot_wider
?column_to_rownames
?max
?round
?nrow
?ncol
install.packages("rbioapi")
rbioapi::rba_jaspar_species(release = 2024)
a=rbioapi::rba_jaspar_species(release = 2024)
View(a)
View(a)
rbioapi::rba_jaspar_species(release = 2024)$"species"
?get_TGs_from_JASPAR2024
document()
document()
?get_TGs_from_JASPAR2024
?get_interest_cell_type_data
interest_cell_type_sGRN_all_TGTF_pairs <- readRDS("D:/pbmc-equation/pr50 newest for paper/CD4 TCM result pr50/3 get sGRN/interest_cell_type_sGRN_all_TGTF_pairs.rds")
View(interest_cell_type_sGRN_all_TGTF_pairs)
class(interest_cell_type_sGRN_all_TGTF_pairs[["CD4 TCM"]])
View(interest_cell_type_sGRN_all_TGTF_pairs[["CD4 TCM"]])
?cell_grouping
?get_interest_cell_type_data
document()
document()
build()
?get_sGRN_by_TFBS_pwm_by_JASPAR2024
check()
document()
build()
load("D:/pbmc-equation/pr50 newest for paper/CD4 TCM result pr50/2.2 Data Processing - Cell Grouping/code2.2.RData")
?get_sGRN_by_TFBS_pwm_by_JASPAR2024
min_score_for_matchPWM = "80%"
promoter_range
interest_cell_type_data
results_identify_TGs
BSgenome.Hsapiens.UCSC.hg38
library(BSgenome.Hsapiens.UCSC.hg38)
BSgenome.Hsapiens.UCSC.hg38
interest_cell_type_sGRN_all_TGTF_pairs = get_sGRN_by_TFBS_pwm_by_JASPAR2024(
interest_cell_type_data = interest_cell_type_data,
promoter_range = promoter_range,
results_identify_TGs = results_identify_TGs,
genome = BSgenome.Hsapiens.UCSC.hg38, # 【待调超参】，调用碱基序列所基于的基因组
min_score_for_matchPWM = min_score_for_matchPWM, #【待调超参】，PWM匹配TFG的最小得分阈值
species = "Homo sapiens", # 物种
collection = c("CORE", "CNE", "PHYLOFACTS", "SPLICE", "POLII", "FAM", "PBM", "PBM_HOMEO", "PBM_HLH", "UNVALIDATED"), # 子数据库
output_predicted_TFBS = F,
ncores = 1
)
setwd("..")
View(results_identify_TGs)
results_identify_TGs[["TGs"]]=results_identify_TGs[["TGs"]][1:5]
results_identify_TGs[["peak_anno_promoter"]][results_identify_TGs[["TGs"]],]
results_identify_TGs[["peak_anno_promoter"]]=results_identify_TGs[["peak_anno_promoter"]][results_identify_TGs[["TGs"]],]
interest_cell_type_data[[cell_type]][["interest_TGs"]]
cell_type="CD4 TCM"
interest_cell_type_data[[cell_type]][["interest_TGs"]]
results_identify_TGs[["TGs"]]=results_identify_TGs[["TGs"]]%in%interest_cell_type_data[[cell_type]][["interest_TGs"]]=
results_identify_TGs[["TGs"]]=results_identify_TGs[["TGs"]]%in%interest_cell_type_data[[cell_type]][["interest_TGs"]]
results_identify_TGs[["TGs"]]
load("D:/pbmc-equation/pr50 newest for paper/CD4 TCM result pr50/2.2 Data Processing - Cell Grouping/code2.2.RData")
document()
build()
get_sGRN_by_TFBS_pwm_by_JASPAR2024
load("D:/pbmc-equation/pr50 newest for paper/CD4 TCM result pr50/2.2 Data Processing - Cell Grouping/code2.2.RData")
interest_cell_type_sGRN_all_TGTF_pairs = get_sGRN_by_TFBS_pwm_by_JASPAR2024(
interest_cell_type_data = interest_cell_type_data,
promoter_range = promoter_range,
results_identify_TGs = results_identify_TGs,
genome = BSgenome.Hsapiens.UCSC.hg38, # 【待调超参】，调用碱基序列所基于的基因组
min_score_for_matchPWM = min_score_for_matchPWM, #【待调超参】，PWM匹配TFG的最小得分阈值
species = "Homo sapiens", # 物种
collection = c("CORE", "CNE", "PHYLOFACTS", "SPLICE", "POLII", "FAM", "PBM", "PBM_HOMEO", "PBM_HLH", "UNVALIDATED"), # 子数据库
output_predicted_TFBS = F,
ncores = 1
)
setwd".."
setwd("..")
load("D:/pbmc-equation/pr50 newest for paper/CD4 TCM result pr50/2.2 Data Processing - Cell Grouping/code2.2.RData")
min_score_for_matchPWM = "80%"
interest_cell_type_sGRN_all_TGTF_pairs = get_sGRN_by_TFBS_pwm_by_JASPAR2024(
interest_cell_type_data = interest_cell_type_data,
promoter_range = promoter_range,
results_identify_TGs = results_identify_TGs,
genome = BSgenome.Hsapiens.UCSC.hg38, # 【待调超参】，调用碱基序列所基于的基因组
min_score_for_matchPWM = min_score_for_matchPWM, #【待调超参】，PWM匹配TFG的最小得分阈值
species = "Homo sapiens", # 物种
collection = c("CORE", "CNE", "PHYLOFACTS", "SPLICE", "POLII", "FAM", "PBM", "PBM_HOMEO", "PBM_HLH", "UNVALIDATED"), # 子数据库
output_predicted_TFBS = F,
ncores = 1
)
?dplyr::`%>%`
setwd("..")
document()
document()
build()
get_sGRN_by_TFBS_pwm_by_JASPAR2024
load("D:/pbmc-equation/pr50 newest for paper/CD4 TCM result pr50/2.2 Data Processing - Cell Grouping/code2.2.RData")
min_score_for_matchPWM = "80%"
interest_cell_type_sGRN_all_TGTF_pairs = get_sGRN_by_TFBS_pwm_by_JASPAR2024(
interest_cell_type_data = interest_cell_type_data,
promoter_range = promoter_range,
results_identify_TGs = results_identify_TGs,
genome = BSgenome.Hsapiens.UCSC.hg38, # 【待调超参】，调用碱基序列所基于的基因组
min_score_for_matchPWM = min_score_for_matchPWM, #【待调超参】，PWM匹配TFG的最小得分阈值
species = "Homo sapiens", # 物种
collection = c("CORE", "CNE", "PHYLOFACTS", "SPLICE", "POLII", "FAM", "PBM", "PBM_HOMEO", "PBM_HLH", "UNVALIDATED"), # 子数据库
output_predicted_TFBS = F,
ncores = 1
)
View(interest_cell_type_sGRN_all_TGTF_pairs)
View(interest_cell_type_sGRN_all_TGTF_pairs[["CD4 TCM"]])
document()
build()
?get_sGRN_by_TFBS_pwm_by_JASPAR2024
results_PWM_match_TF_by_parallel <- readRDS("D:/pbmc-equation/mypkg/scDEDS/3 get sGRN/results_PWM_match_TF_by_parallel.rds")
View(results_PWM_match_TF_by_parallel)
document()
?matrix
?get_interest_cell_type_data
document()
build()
check()
document()
build()
build()
load("D:/pbmc-equation/pr50 newest for paper/CD4 TCM result pr50/3 get sGRN/code3.RData")
?get_branch_sGRN
interest_cell_type_sGRN_all_TGTF_pairs
View(interest_cell_type_sGRN_all_TGTF_pairs)
interest_cell_type_group
interest_cell_type_branch_sGRN = get_branch_sGRN(
interest_cell_type_sGRN_all_TGTF_pairs = interest_cell_type_sGRN_all_TGTF_pairs,
interest_cell_type_group = interest_cell_type_group,
ncores = ncores
)
rm(get_branch_sGRN)
interest_cell_type_branch_sGRN = get_branch_sGRN(
interest_cell_type_sGRN_all_TGTF_pairs = interest_cell_type_sGRN_all_TGTF_pairs,
interest_cell_type_group = interest_cell_type_group,
ncores = ncores
)
setwd("..")
setwd("..")
ncores = 1
interest_cell_type_branch_sGRN = get_branch_sGRN(
interest_cell_type_sGRN_all_TGTF_pairs = interest_cell_type_sGRN_all_TGTF_pairs,
interest_cell_type_group = interest_cell_type_group,
ncores = ncores
)
Viwe(interest_cell_type_branch_sGRN )
View(interest_cell_type_branch_sGRN )
?sort
?unique
?unlist
?lapply
?matrix
?is.null
document()
document()
document()
build()
load("D:/pbmc-equation/pr50 newest for paper/CD4 TCM result pr50/3 get sGRN/code3.RData")
?get_sGRN
interest_cell_type_sGRN = get_sGRN(
interest_cell_type_sGRN_all_TGTF_pairs = interest_cell_type_sGRN_all_TGTF_pairs,
interest_cell_type_branch_sGRN = interest_cell_type_branch_sGRN
)
rm(get_sGRN)
interest_cell_type_sGRN = get_sGRN(
interest_cell_type_sGRN_all_TGTF_pairs = interest_cell_type_sGRN_all_TGTF_pairs,
interest_cell_type_branch_sGRN = interest_cell_type_branch_sGRN
)
View(interest_cell_type_sGRN )
interest_cell_type_sGRN[["CD4 TCM"]]
View(interest_cell_type_sGRN[["CD4 TCM"]])
check()
check()
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
?runif
?c
?set.seed
？expand.grid
?expand.grid
?do.call
?duplicated
?subset
c(0.7, 0.15)
message("The training set proportion is ", prop[1], ", the validation set proportion is ", prop[2], ", and the test set proportion is ", 1 - prop[] - prop[2], ".")
prop = c(0.7, 0.15)
message("The training set proportion is ", prop[1], ", the validation set proportion is ", prop[2], ", and the test set proportion is ", 1 - prop[] - prop[2], ".")
message("The training set proportion is ", prop[1], ", the validation set proportion is ", prop[2], ", and the test set proportion is ", 1 - prop[1] - prop[2], ".")
message("The number of positive samples is ", 1, ", and the number of negative samples is ", 1, ".")
message("Calculate the number of positive and negative samples in the training, validation, and test sets.")
message("Calculate the number of positive and
negative samples in the training, validation, and test sets.")
message("The training set contains ", 1, ", positive and ", 1, " negative samples;
the validation set contains ", 1, " positive and ", 1, " negative samples;
the test set contains ", 1, " positive and ", 1, " negative samples.")
message("The training set contains ", 1, ", positive and ", 1, " negative samples;
the validation set contains ", 1, " positive and ", 1, " negative samples;
the test set contains ", 1, " positive and ", 1, " negative samples.")
message("The training set contains ", 1, ", positive and ", 1, " negative samples.")
message("The validation set contains ", 1, " positive and ", 1, " negative samples.")
message("The test set contains ", 1, " positive and ", 1, " negative samples.")
neg_samples=1:10
neg_samples = neg_samples[sample(nrow(neg_samples)), ]
?nrow
?round
?sample
?rbind
?data.frame
?rep
?
nrow
?rbind
?identical
?sort
?unique
message("Sampling failed: Unable to cover all TGs and TFs. Please use a GRN with more positive samples or increase the training set proportion.")
stop("Sampling failed: Unable to cover all TGs and TFs. Please use a GRN with more positive samples or increase the training set proportion.")
?get_interest_cell_type_data
?get_sGRN_by_TFBS_pwm_by_JASPAR2024
document()
build()
?spilt_dataset
document()
build()
?spilt_dataset
load("D:/pbmc-equation/pr50 newest for paper/CD4 TCM result pr50/3 get sGRN/code3.RData")
interest_cell_type_branch_dataset_spilt = spilt_dataset(
interest_cell_type_branch_sGRN = interest_cell_type_branch_sGRN, # 分支GRN
prop = c(0.7, 0.15), # 训练集占比、数据集占比，剩下不足1的部分默认为测试集占比
set_seed = 123, # 如果设置固定种子，可保证结果的重复性
interest_cell_type_group, ncores = 1
)
View(interest_cell_type_branch_dataset_spilt)
check()
?sort
?v
?unique
?grepl
message("Setting initial parameter values for the data of branch ", 1, " of cell type ", 1, ".")
message("Setting α1 in α.")
document()
build()
check()
document()
document()
build()
check()
load("D:/pbmc-equation/pr50 newest for paper/CD4 TCM result pr50/4.1 Build Prediction Model - Split Dataset Into Training, Validation, Test Set/code4.1.RData")
?set_init_params
ncores =1
interest_cell_type_branch_init_params = set_init_params(
interest_cell_type_branch_dataset_spilt = interest_cell_type_branch_dataset_spilt,
ncores = ncores
)
View(interest_cell_type_branch_init_params)
interest_cell_type_branch_init_params[["CD4 TCM"]][[2]]
interest_cell_type_branch_init_params[["CD4 TCM"]][[2]][["β"]]
?set_init_params_lower
interest_cell_type_branch_init_params_lower = set_init_params_lower(
interest_cell_type_branch_dataset_spilt = interest_cell_type_branch_dataset_spilt,
ncores = ncores
)
View(interest_cell_type_branch_init_params_lower)
?set_init_params_upper
interest_cell_type_branch_init_params_upper = set_init_params_upper(
interest_cell_type_branch_dataset_spilt = interest_cell_type_branch_dataset_spilt,
ncores = ncores
)
document()
?cell_grouping
document()
?R_cal
build()
?R_cal
document90
document()
build()
check()
document()
build()
check()
?sapply
?sub
?mean
?as.numeric
?var
document()
build()
check()
?f_train_cal
document()
build()
?set.seed
?as.numeric
?pmin
?rep
?unlist
?setdiff
?ls
?is.na
?is.infinite
document()
build()
check()
?is.null
?rep
scDEDS
scDEDS::f_train_cal_gr
?as.numeric
scDEDS::f_train_cal
?pmin
message("Grad | iter = ", 1, " | Best = ", round(2, 6), "| learning_rate = ", round(3, 6), " | ncores = ", 4)
?f_train_cal_gr
setseed
?spilt_dataset
document()
build()
check()
?sub
scDEDS::Hill_cal
scDEDS::R_cal
?mean
?as.numeric
?sapply
?gradient_ascent_train
document()
build()
check()
document()
build()
document()
build()
?table
?roc
document()
build()
check()
document()
build()
check()
as.numeric
?as.numeric
?optim
?sub
seq_len
?seq_len
?mean
base::sapply
?sapply
?Hill_cal
?loss_cal
document()
build()
check()
